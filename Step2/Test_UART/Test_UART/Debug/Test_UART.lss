
Test_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efa  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ff  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	ed c0       	rjmp	.+474    	; 0x1f0 <__vector_5>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	a6 c0       	rjmp	.+332    	; 0x196 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	db d0       	rcall	.+438    	; 0x260 <main>
  aa:	e4 c0       	rjmp	.+456    	; 0x274 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_USART>:
		return;

		input_data(arr[i]);
		i++;
	}
}
  ae:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  bc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	89 b9       	out	0x09, r24	; 9
  c4:	08 95       	ret

000000c6 <tx>:
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <tx>
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <CMD>:
  ce:	ef e9       	ldi	r30, 0x9F	; 159
  d0:	ff e0       	ldi	r31, 0x0F	; 15
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <CMD+0x4>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <CMD+0xa>
  d8:	00 00       	nop
  da:	15 ba       	out	0x15, r1	; 21
  dc:	00 00       	nop
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	95 bb       	out	0x15, r25	; 21
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <CMD+0x16>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <CMD+0x18>
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ea:	00 c0       	rjmp	.+0      	; 0xec <CMD+0x1e>
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_initialize>:
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	86 e7       	ldi	r24, 0x76	; 118
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <LCD_initialize+0x6>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_initialize+0x10>
 102:	00 00       	nop
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	e3 df       	rcall	.-58     	; 0xce <CMD>
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_initialize+0x1a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_initialize+0x20>
 112:	00 00       	nop
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	db df       	rcall	.-74     	; 0xce <CMD>
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_initialize+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_initialize+0x30>
 122:	00 00       	nop
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	d3 df       	rcall	.-90     	; 0xce <CMD>
 128:	8f e9       	ldi	r24, 0x9F	; 159
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_initialize+0x3a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_initialize+0x40>
 132:	00 00       	nop
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	cb df       	rcall	.-106    	; 0xce <CMD>
 138:	95 ed       	ldi	r25, 0xD5	; 213
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_initialize+0x48>
 13e:	00 00       	nop
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	c5 df       	rcall	.-118    	; 0xce <CMD>
 144:	25 ed       	ldi	r18, 0xD5	; 213
 146:	2a 95       	dec	r18
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_initialize+0x54>
 14a:	00 00       	nop
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	bf df       	rcall	.-130    	; 0xce <CMD>
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_initialize+0x60>
 156:	00 00       	nop
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	b9 df       	rcall	.-142    	; 0xce <CMD>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_initialize+0x6e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_initialize+0x74>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <input_data>:
 16a:	ef e9       	ldi	r30, 0x9F	; 159
 16c:	ff e0       	ldi	r31, 0x0F	; 15
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <input_data+0x4>
 172:	00 c0       	rjmp	.+0      	; 0x174 <input_data+0xa>
 174:	00 00       	nop
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	95 bb       	out	0x15, r25	; 21
 17a:	00 00       	nop
 17c:	95 e0       	ldi	r25, 0x05	; 5
 17e:	95 bb       	out	0x15, r25	; 21
 180:	00 c0       	rjmp	.+0      	; 0x182 <input_data+0x18>
 182:	00 c0       	rjmp	.+0      	; 0x184 <input_data+0x1a>
 184:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 188:	00 c0       	rjmp	.+0      	; 0x18a <input_data+0x20>
 18a:	15 ba       	out	0x15, r1	; 21
 18c:	f5 e0       	ldi	r31, 0x05	; 5
 18e:	fa 95       	dec	r31
 190:	f1 f7       	brne	.-4      	; 0x18e <input_data+0x24>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <__vector_18>:
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	0b b6       	in	r0, 0x3b	; 59
 1a2:	0f 92       	push	r0
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	8c b1       	in	r24, 0x0c	; 12
 1be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	d3 df       	rcall	.-90     	; 0x16a <input_data>
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c8:	7e df       	rcall	.-260    	; 0xc6 <tx>
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_5>:

ISR(INT4_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0b b6       	in	r0, 0x3b	; 59
 1fc:	0f 92       	push	r0
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	86 e7       	ldi	r24, 0x76	; 118
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <__vector_5+0x2c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <__vector_5+0x36>
 226:	00 00       	nop
	_delay_ms(30);
	if ((PINE & 0x10) != 0x10)
 228:	0c 9b       	sbis	0x01, 4	; 1
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__vector_5+0x40>
		return;
	CMD(Clear_Display);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	4f df       	rcall	.-354    	; 0xce <CMD>
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <init_external_interrupt>:

void init_external_interrupt()
{
	EICRB = 0x03; // int4 rising edge
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x10; // int4 interrupt active 	
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	89 bf       	out	0x39, r24	; 57
 25e:	08 95       	ret

00000260 <main>:
void input_string(unsigned char* arr);

void init_external_interrupt();
int main(void)
{
	DDRF = 0xff;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0xff;	
 266:	84 bb       	out	0x14, r24	; 20
	init_USART();
 268:	22 df       	rcall	.-444    	; 0xae <init_USART>
	LCD_initialize();
 26a:	43 df       	rcall	.-378    	; 0xf2 <LCD_initialize>
	init_external_interrupt();
 26c:	f4 df       	rcall	.-24     	; 0x256 <init_external_interrupt>
 26e:	80 e8       	ldi	r24, 0x80	; 128
	SREG = 0x80;
 270:	8f bf       	out	0x3f, r24	; 63
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x12>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
